// <auto-generated />
using System;
using GatewayService.AccountCharge.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GatewayService.AccountCharge.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AccountChargeDb))]
    [Migration("20250922133046_AddUniqueIndex_On_InvoiceAppliedDeposits_TxHash")]
    partial class AddUniqueIndex_On_InvoiceAppliedDeposits_TxHash
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GatewayService.AccountCharge.Domain.Invoices.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.ToTable("Invoices", (string)null);
                });

            modelBuilder.Entity("GatewayService.AccountCharge.Domain.Invoices.Invoice", b =>
                {
                    b.OwnsMany("GatewayService.AccountCharge.Domain.Invoices.AppliedDeposit", "AppliedDeposits", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Confirmations")
                                .HasColumnType("int");

                            b1.Property<Guid>("InvoiceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("ObservedAt")
                                .HasColumnType("datetimeoffset");

                            b1.Property<int>("RequiredConfirmations")
                                .HasColumnType("int");

                            b1.Property<string>("TxHash")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("nvarchar(128)")
                                .HasColumnName("TxHash");

                            b1.Property<bool>("WasConfirmed")
                                .HasColumnType("bit");

                            b1.HasKey("Id");

                            b1.HasIndex("InvoiceId");

                            b1.HasIndex("ObservedAt");

                            b1.HasIndex("InvoiceId", "TxHash")
                                .IsUnique();

                            b1.ToTable("InvoiceAppliedDeposits", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("InvoiceId");

                            b1.OwnsOne("GatewayService.AccountCharge.Domain.ValueObjects.Money", "Amount", b2 =>
                                {
                                    b2.Property<Guid>("AppliedDepositId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<decimal>("Amount")
                                        .HasColumnType("decimal(38, 18)")
                                        .HasColumnName("Amount");

                                    b2.Property<string>("Currency")
                                        .IsRequired()
                                        .HasMaxLength(16)
                                        .HasColumnType("nvarchar(16)")
                                        .HasColumnName("Currency");

                                    b2.HasKey("AppliedDepositId");

                                    b2.ToTable("InvoiceAppliedDeposits");

                                    b2.WithOwner()
                                        .HasForeignKey("AppliedDepositId");
                                });

                            b1.OwnsOne("GatewayService.AccountCharge.Domain.ValueObjects.ChainAddress", "Address", b2 =>
                                {
                                    b2.Property<Guid>("AppliedDepositId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Address")
                                        .IsRequired()
                                        .HasMaxLength(128)
                                        .HasColumnType("nvarchar(128)")
                                        .HasColumnName("DepositAddress");

                                    b2.Property<string>("Network")
                                        .IsRequired()
                                        .HasMaxLength(32)
                                        .HasColumnType("nvarchar(32)")
                                        .HasColumnName("DepositNetwork");

                                    b2.Property<string>("Tag")
                                        .HasMaxLength(128)
                                        .HasColumnType("nvarchar(128)")
                                        .HasColumnName("DepositTag");

                                    b2.HasKey("AppliedDepositId");

                                    b2.ToTable("InvoiceAppliedDeposits");

                                    b2.WithOwner()
                                        .HasForeignKey("AppliedDepositId");
                                });

                            b1.Navigation("Address")
                                .IsRequired();

                            b1.Navigation("Amount")
                                .IsRequired();
                        });

                    b.OwnsOne("GatewayService.AccountCharge.Domain.ValueObjects.Money", "ExpectedAmount", b1 =>
                        {
                            b1.Property<Guid>("InvoiceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(38, 18)")
                                .HasColumnName("ExpectedAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(16)
                                .HasColumnType("nvarchar(16)")
                                .HasColumnName("ExpectedCurrency");

                            b1.HasKey("InvoiceId");

                            b1.ToTable("Invoices");

                            b1.WithOwner()
                                .HasForeignKey("InvoiceId");
                        });

                    b.OwnsMany("InvoiceAddress", "Addresses", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("DepositAddress");

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("CreatedAt");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(16)
                                .HasColumnType("nvarchar(16)")
                                .HasColumnName("WalletCurrency");

                            b1.Property<Guid>("InvoiceId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("InvoiceId");

                            b1.Property<string>("Network")
                                .HasMaxLength(32)
                                .HasColumnType("nvarchar(32)")
                                .HasColumnName("DepositNetwork");

                            b1.Property<string>("Tag")
                                .HasMaxLength(128)
                                .HasColumnType("nvarchar(128)")
                                .HasColumnName("DepositTag");

                            b1.Property<int>("WalletId")
                                .HasColumnType("int")
                                .HasColumnName("WalletId");

                            b1.HasKey("Id");

                            b1.HasIndex("CreatedAt");

                            b1.HasIndex("InvoiceId");

                            b1.HasIndex("InvoiceId", "Address", "Network", "Tag", "WalletId")
                                .IsUnique()
                                .HasFilter("[DepositNetwork] IS NOT NULL AND [DepositTag] IS NOT NULL");

                            b1.ToTable("InvoiceAddresses", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("InvoiceId");
                        });

                    b.Navigation("Addresses");

                    b.Navigation("AppliedDeposits");

                    b.Navigation("ExpectedAmount")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
